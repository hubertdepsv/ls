#!/usr/bin/env python

from textwrap import dedent
import sys
from datetime import date

import psycopg2
from psycopg2 import extras
from contextlib import contextmanager

class ExpenseData:
    @contextmanager
    def _database_connect(self):
        connection = psycopg2.connect(dbname='expensesdb')
        try:
            with connection:
                yield connection
        finally:
            connection.close()

    def list_expenses(self):
        with self._database_connect() as connection:
            with connection.cursor(cursor_factory=extras.DictCursor) as cursor:
                cursor.execute("SELECT * FROM expenses ORDER BY created_on ASC")
                result = cursor.fetchall()

        self._display_expenses(result)

    def add_expense(self, amount, memo):
        with self._database_connect() as connection:
            with connection.cursor() as cursor:
                cursor.execute(
                    """
                        INSERT INTO expenses
                        (amount, memo, created_on)
                        VALUES
                        (%s, %s, %s)
                    """,
                    (amount, memo, date.today())
                )

    def search_expenses(self, query):
        with self._database_connect() as connection:
            with connection.cursor(cursor_factory=extras.DictCursor) as cursor:
                sql = "SELECT * FROM expenses WHERE memo ILIKE %s"
                cursor.execute(sql, (f"%{query}%",))
                result = cursor.fetchall()

        self._display_expenses(result)

    def delete_expense(self, idnum):
        with self._database_connect() as connection:
            with connection.cursor(cursor_factory=extras.DictCursor) as cursor:
                cursor.execute("SELECT * FROM expenses WHERE id = %s", (idnum,))
                result = cursor.fetchone()
                if result:
                    cursor.execute("DELETE FROM expenses WHERE id = %s", (idnum,))
                    print("The following expense has been deleted:")
                    self._display_expenses([result])
                else:
                    print(f"There is no expense with id '{idnum}'.")

    def _display_expenses(self, expenses):
        for expense in expenses:
            columns = [
                str(expense["id"]).rjust(3),
                str(expense["created_on"]),
                str(expense["amount"]).rjust(12),
                str(expense["memo"])
            ]
            print(" | ".join(columns))

class CLI:
    def __init__(self):
        self.application = ExpenseData()
        
    def run(self, arguments):
        if not arguments:
            command = None
        else:
            command = arguments.pop(0)

        match command:
            case "add":
                if len(arguments) < 2:
                    print("You must provide an amount and memo.")
                    return
                amount, memo = arguments
                self.application.add_expense(amount, memo)
            case "delete":
                if len(arguments) < 1:
                    print("You must provide an expense ID.")
                    return
                self.application.delete_expense(arguments[0])
            case "list":
                self.application.list_expenses()
            case "search":
                if len(arguments) < 1:
                    print("You must provide a search query.")
                    return
                self.application.search_expenses(arguments[0])
            case _:
                self.display_help()

    def display_help(self):
        print(dedent("""
            An expense recording system

            Commands:

            add AMOUNT MEMO - record a new expense
            clear - delete all expenses
            list - list all expenses
            delete NUMBER - remove expense with id NUMBER
            search QUERY - list expenses with a matching memo field
        """))

if __name__ == "__main__":
    cli = CLI()
    cli.run(sys.argv[1:])